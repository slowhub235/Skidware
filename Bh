-- Initialize Sound
local Sound = Instance.new("Sound", game:GetService("SoundService"))
Sound.SoundId = "rbxassetid://232127604"
Sound:Play()

-- Set RolePlayName, Color, and Bio
local args1 = { [1] = "RolePlayName", [2] = "Skidware" }
game:GetService("ReplicatedStorage").RE:FindFirstChild("1RPNam1eTex1t"):FireServer(unpack(args1))

local args = { [1] = "PickingRPNameColor", [2] = Color3.fromRGB(194, 56, 164) }
game:GetService("ReplicatedStorage").RE:FindFirstChild("1RPNam1eColo1r"):FireServer(unpack(args))

local args4 = { [1] = "RolePlayBio", [2] = "Skidware" }
game:GetService("ReplicatedStorage").RE:FindFirstChild("1RPNam1eTex1t"):FireServer(unpack(args4))

-- Load Fluent UI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = Fluent.SaveManager
local InterfaceManager = Fluent.InterfaceManager

-- Create Fluent UI Window with Dark Theme
local Window = Fluent:CreateWindow({
    Title = "Skidware",
    SubTitle = "by xosu",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Theme = "Dark",
    Acrylic = true,
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Info = Window:AddTab({ Title = "Information", Icon = "info-circle" }),
    Home = Window:AddTab({ Title = "Home", Icon = "home" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    Houses = Window:AddTab({ Title = "Houses", Icon = "home" }),
    Troll = Window:AddTab({ Title = "Troll", Icon = "alert-circle" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

-- Information Tab
local InfoSection = Tabs.Info:AddSection("Creator")
Tabs.Info:AddParagraph({
    Title = "Developers",
    Content = "Dev - Script: xosu"
})

local function copyText()
    local textToCopy = "https://discord.gg/25ms"
    setclipboard(textToCopy)
    Fluent:Notify({
        Title = "Text Copied",
        Content = "The Discord link has been copied to the clipboard",
        Duration = 5
    })
end

Tabs.Info:AddButton({
    Title = "Copy Discord Link",
    Callback = copyText
})

local GameSection = Tabs.Info:AddSection("Game Info")
local playerName = game.Players.LocalPlayer.Name
local gameName = "Unknown Game"
local success, gameInfo = pcall(function()
    return game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
end)
if success and gameInfo then
    gameName = gameInfo.Name
end
Tabs.Info:AddParagraph({ Title = "Game Name", Content = gameName })

local exploitCountLabel = Tabs.Info:AddParagraph({ Title = "Exploit Count", Content = "0" })

-- Home Tab
local HomeSettingsSection = Tabs.Home:AddSection("Hub Settings")
local Players = game:GetService("Players")
local notificationsEnabled = true

local function showNotification(message, duration)
    if notificationsEnabled then
        Fluent:Notify({
            Title = "Notification",
            Content = message,
            Duration = duration or 5
        })
    end
end

Players.PlayerAdded:Connect(function(player)
    showNotification(player.Name .. " joined the game!", 5)
end)
Players.PlayerRemoving:Connect(function(player)
    showNotification(player.Name .. " left the game!", 5)
end)

Tabs.Home:AddToggle({
    Title = "Join/Leave Notifications",
    Default = true,
    Callback = function(value)
        notificationsEnabled = value
    end
})

local playerCountLabel = Tabs.Home:AddParagraph({ Title = "Player Count", Content = "0" })
local function updatePlayerCount()
    local playerCount = #Players:GetPlayers()
    playerCountLabel:Set({ Title = "Player Count", Content = tostring(playerCount) })
end
Players.PlayerAdded:Connect(updatePlayerCount)
Players.PlayerRemoving:Connect(updatePlayerCount)
updatePlayerCount()

local fpsLabel = Tabs.Home:AddParagraph({ Title = "FPS", Content = "0" })
local lastTime = tick()
local frameCount = 0
local function updateFPS()
    frameCount = frameCount + 1
    local currentTime = tick()
    if (currentTime - lastTime) >= 1 then
        local fps = frameCount / (currentTime - lastTime)
        fpsLabel:Set({ Title = "FPS", Content = string.format("%.2f", fps) })
        lastTime = currentTime
        frameCount = 0
    end
end
game:GetService("RunService").RenderStepped:Connect(updateFPS)

-- Player Settings Section
local PlayerSettingsSection = Tabs.Home:AddSection("Player Settings")
local speedValue = 16
Tabs.Home:AddInput({
    Title = "Speed",
    Default = "16",
    Placeholder = "Enter speed",
    Callback = function(value)
        local number = tonumber(value)
        if number then
            speedValue = number
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speedValue
        end
    end
})

local gravityValue = 196.2
Tabs.Home:AddInput({
    Title = "Gravity",
    Default = "196.2",
    Placeholder = "Enter gravity",
    Callback = function(value)
        local number = tonumber(value)
        if number then
            gravityValue = number
            game.Workspace.Gravity = gravityValue
        end
    end
})

local jumpPower = 50
Tabs.Home:AddInput({
    Title = "Jump Power",
    Default = "50",
    Placeholder = "Enter jump power",
    Callback = function(value)
        local number = tonumber(value)
        if number then
            jumpPower = number
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPower
        end
    end
})

Tabs.Home:AddButton({
    Title = "Reset Speed/Gravity/Jump",
    Callback = function()
        jumpPower = 50
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPower
        speedValue = 16
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speedValue
        gravityValue = 196.2
        game.Workspace.Gravity = gravityValue
    end
})

-- ESP Section
local EspSection = Tabs.Home:AddSection("ESP Settings")
function isnil(thing) return thing == nil end
local function round(n) return math.floor(tonumber(n) + 0.5) end
Number = math.random(1, 1000000)
function UpdatePlayerChams()
    for i, v in pairs(game:GetService("Players"):GetChildren()) do
        pcall(function()
            if not isnil(v.Character) then
                if ESPPlayer then
                    if not isnil(v.Character.Head) and not v.Character.Head:FindFirstChild("NameEsp" .. Number) then
                        local bill = Instance.new("BillboardGui", v.Character.Head)
                        bill.Name = "NameEsp" .. Number
                        bill.ExtentsOffset = Vector3.new(0, 1, 0)
                        bill.Size = UDim2.new(1, 200, 1, 30)
                        bill.Adornee = v.Character.Head
                        bill.AlwaysOnTop = true
                        local name = Instance.new("TextLabel", bill)
                        name.Font = Enum.Font.Legacy
                        name.TextSize = 14
                        name.TextWrapped = true
                        name.Text = v.Name .. "\n" .. round((game:GetService("Players").LocalPlayer.Character.Head.Position - v.Character.Head.Position).Magnitude / 3) .. " M"
                        name.Size = UDim2.new(1, 0, 1, 0)
                        name.TextYAlignment = Enum.TextYAlignment.Top
                        name.BackgroundTransparency = 1
                        name.TextStrokeTransparency = 0.5
                        if v.Team == game.Players.LocalPlayer.Team then
                            name.TextColor3 = Color3.new(0, 1, 0)
                        else
                            name.TextColor3 = Color3.new(1, 0, 0)
                        end
                    else
                        v.Character.Head["NameEsp" .. Number].TextLabel.Text = v.Name .. " | " .. round((game:GetService("Players").LocalPlayer.Character.Head.Position - v.Character.Head.Position).Magnitude / 3) .. " M\nHealth: " .. round((v.Character.Humanoid.Health * 100) / v.Character.Humanoid.MaxHealth) .. "%"
                    end
                elseif v.Character.Head:FindFirstChild("NameEsp" .. Number) then
                    v.Character.Head:FindFirstChild("NameEsp" .. Number):Destroy()
                end
            end
        end)
    end
end
Tabs.Home:AddToggle({
    Title = "Name ESP",
    Default = false,
    Callback = function(value)
        ESPPlayer = value
        while ESPPlayer do
            wait()
            UpdatePlayerChams()
        end
    end
})
spawn(function()
    while wait() do
        if ESPPlayer then UpdatePlayerChams() end
    end
end)

local LocalPlayer = Players.LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local espEnabled = false
local espObjects = {}
local function createESP(player)
    local espLine = Drawing.new("Line")
    espLine.Visible = false
    espLine.Color = Color3.fromRGB(255, 0, 0)
    espLine.Thickness = 2
    espLine.Transparency = 1
    local espName = Drawing.new("Text")
    espName.Visible = false
    espName.Color = Color3.fromRGB(255, 255, 255)
    espName.Size = 18
    espName.Center = true
    espName.Outline = true
    espName.Text = player.Name
    local espHealth = Drawing.new("Text")
    espHealth.Visible = false
    espHealth.Color = Color3.fromRGB(0, 255, 0)
    espHealth.Size = 18
    espHealth.Center = true
    espHealth.Outline = true
    espObjects[player] = { Line = espLine, Name = espName, Health = espHealth }
end
local function updateESP()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local humanoid = player.Character:FindFirstChild("Humanoid")
            local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
            if onScreen then
                local espLine = espObjects[player].Line
                local espName = espObjects[player].Name
                local espHealth = espObjects[player].Health
                espLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                espLine.To = Vector2.new(screenPos.X, screenPos.Y)
                espLine.Visible = espEnabled
                espName.Position = Vector2.new(screenPos.X, screenPos.Y - 25)
                espName.Visible = espEnabled
                if humanoid then
                    espHealth.Text = "HP: " .. math.floor(humanoid.Health)
                    espHealth.Position = Vector2.new(screenPos.X, screenPos.Y - 45)
                    espHealth.Visible = espEnabled
                end
            else
                espObjects[player].Line.Visible = false
                espObjects[player].Name.Visible = false
                espObjects[player].Health.Visible = false
            end
        end
    end
end
local function toggleESP(value)
    espEnabled = value
    if espEnabled then
        for _, player in pairs(Players:GetPlayers()) do
            if not espObjects[player] then
                createESP(player)
            end
        end
    else
        for _, esp in pairs(espObjects) do
            esp.Line.Visible = false
            esp.Name.Visible = false
            esp.Health.Visible = false
        end
    end
end
Tabs.Home:AddToggle({
    Title = "Name + Lines ESP",
    Default = false,
    Callback = function(value) toggleESP(value) end
})

-- Player Tab
local SpectateSection = Tabs.Player:AddSection("Spectate Settings")
local selectedPlayer = nil
local spectateEnabled = false
local function updatePlayerList(dropdown)
    local playerNames = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
    dropdown:Refresh(playerNames, true)
end
local function spectatePlayer(playerName)
    local targetPlayer = Players:FindFirstChild(playerName)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        Camera.CameraSubject = targetPlayer.Character.Humanoid
    end
end
local function stopSpectating()
    Camera.CameraSubject = LocalPlayer.Character.Humanoid
end
local playerDropdown = Tabs.Player:AddDropdown({
    Title = "Select Player",
    Default = "",
    Options = {},
    Callback = function(value)
        selectedPlayer = value
    end
})
Tabs.Player:AddButton({
    Title = "Refresh Player List",
    Callback = function()
        updatePlayerList(playerDropdown)
    end
})
Tabs.Player:AddToggle({
    Title = "Spectate Player",
    Default = false,
    Callback = function(value)
        spectateEnabled = value
        if spectateEnabled and selectedPlayer then
            spectatePlayer(selectedPlayer)
        else
            stopSpectating()
        end
    end
})

local PlayerModSection = Tabs.Player:AddSection("Player Modifications")
local wallhackEnabled = false
local function enableWallhack()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end
local function disableWallhack()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end
game:GetService("RunService").RenderStepped:Connect(function()
    if wallhackEnabled then
        enableWallhack()
    else
        disableWallhack()
    end
end)
Tabs.Player:AddToggle({
    Title = "Wallhack",
    Default = false,
    Callback = function(value)
        wallhackEnabled = value
        if not value then disableWallhack() end
    end
})

local infiniteJumpEnabled = false
local UserInputService = game:GetService("UserInputService")
local function onJumpRequest()
    if infiniteJumpEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end
UserInputService.JumpRequest:Connect(onJumpRequest)
Tabs.Player:AddToggle({
    Title = "Infinite Jump",
    Default = false,
    Callback = function(value)
        infiniteJumpEnabled = value
    end
})

local TeleportSection = Tabs.Player:AddSection("Teleport Settings")
local teleportEnabled = false
local function updatePlayerList()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
    return playerNames
end
local function teleportToPlayer()
    if selectedPlayer and teleportEnabled then
        local targetPlayer = Players:FindFirstChild(selectedPlayer)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
        end
    end
end
Tabs.Player:AddDropdown({
    Title = "Select Player",
    Default = "",
    Options = updatePlayerList(),
    Callback = function(value)
        selectedPlayer = value
        if teleportEnabled then
            teleportToPlayer()
        end
    end
})
Tabs.Player:AddButton({
    Title = "Refresh Player List",
    Callback = function()
        Fluent:Notify({
            Title = "List Updated",
            Content = "The player list has been updated",
            Duration = 5
        })
        Tabs.Player:UpdateDropdown("Select Player", updatePlayerList())
    end
})
Tabs.Player:AddToggle({
    Title = "Enable/Disable Teleport",
    Default = false,
    Callback = function(value)
        teleportEnabled = value
        if teleportEnabled then
            teleportToPlayer()
        end
    end
})
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if teleportEnabled and player.Name == selectedPlayer then
            teleportToPlayer()
        end
    end)
end)
game:GetService("RunService").Stepped:Connect(function()
    if teleportEnabled and selectedPlayer then
        teleportToPlayer()
    end
end)

local NameSection = Tabs.Player:AddSection("Name Settings")
Tabs.Player:AddInput({
    Title = "Change Name",
    Default = "Enter name here",
    Placeholder = "Enter name",
    Callback = function(value)
        local args = { [1] = "RolePlayName", [2] = value }
        game:GetService("ReplicatedStorage").RE:FindFirstChild("1RPNam1eTex1t"):FireServer(unpack(args))
    end
})
Tabs.Player:AddInput({
    Title = "Change Bio",
    Default = "Enter bio here",
    Placeholder = "Enter bio",
    Callback = function(value)
        local args = { [1] = "RolePlayBio", [2] = value }
        game:GetService("ReplicatedStorage").RE:FindFirstChild("1RPNam1eTex1t"):FireServer(unpack(args))
    end
})

local ColorSection = Tabs.Player:AddSection("Color Settings")
local function getRandomColor()
    return Color3.new(math.random(), math.random(), math.random())
end
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RemoteEvent = ReplicatedStorage.RE:FindFirstChild("1RPNam1eColo1r")
local nameColorRunning = false
local bioColorRunning = false
local function changeNameColor()
    while nameColorRunning do
        local randomColor = getRandomColor()
        local args = { [1] = "PickingRPNameColor", [2] = randomColor }
        RemoteEvent:FireServer(unpack(args))
        wait(0.5)
    end
end
local function changeBioColor()
    while bioColorRunning do
        local randomColor = getRandomColor()
        local args = { [1] = "PickingRPBioColor", [2] = randomColor }
        RemoteEvent:FireServer(unpack(args))
        wait(0.5)
    end
end
Tabs.Player:AddToggle({
    Title = "Random Name Color",
    Default = false,
    Callback = function(value)
        if value then
            if not nameColorRunning then
                nameColorRunning = true
                spawn(changeNameColor)
            end
        else
            nameColorRunning = false
        end
    end
})
Tabs.Player:AddToggle({
    Title = "Random Bio Color",
    Default = false,
    Callback = function(value)
        if value then
            if not bioColorRunning then
                bioColorRunning = true
                spawn(changeBioColor)
            end
        else
            bioColorRunning = false
        end
    end
})

-- Houses Tab
local houseNumbers = {1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37}
local selectedHouseNumber = nil
Tabs.Houses:AddDropdown({
    Title = "Select House",
    Options = houseNumbers,
    Default = "1",
    Callback = function(value)
        selectedHouseNumber = tonumber(value)
        print("House selected:", selectedHouseNumber)
    end
})
Tabs.Houses:AddButton({
    Title = "Grant Permission",
    Callback = function()
        if selectedHouseNumber then
            local args = {
                [1] = "GivePermissionLoopToServer",
                [2] = game:GetService("Players").LocalPlayer,
                [3] = selectedHouseNumber
            }
            game:GetService("ReplicatedStorage").RE:FindFirstChild("1Playe1rTrigge1rEven1t"):FireServer(unpack(args))
            print("Permission granted for house:", selectedHouseNumber)
        else
            print("No house selected!")
        end
    end
})
Tabs.Houses:AddButton({
    Title = "Remove Ban",
    Callback = function()
        if selectedHouseNumber then
            local lotNumber = "0o1.L0ts"
            local lot = workspace:FindFirstChild(lotNumber)
            if lot then
                for _, house in pairs(lot:GetChildren()) do
                    if house:FindFirstChild("HousePickedByPlayer") then
                        local bannedBlockName = "BannedBlock" .. selectedHouseNumber
                        local bannedBlock = house.HousePickedByPlayer.HouseModel:FindFirstChild(bannedBlockName)
                        if bannedBlock then
                            bannedBlock:Destroy()
                            print(bannedBlockName .. " deleted successfully in " .. house.Name)
                        else
                            print(bannedBlockName .. " not found in " .. house.Name)
                        end
                    end
                end
            else
                print("Lot " .. lotNumber .. " not found.")
            end
        else
            print("No house selected!")
        end
    end
})

-- Troll Tab
local TrollSection = Tabs.Troll:AddSection("Item Settings")
Tabs.Troll:AddButton({
    Title = "Get Guitar (Sound)",
    Callback = function()
        loadstring(game:HttpGet("https://you.whimper.xyz/sources/slowed/1"))()
    end
})
Tabs.Troll:AddButton({
    Title = "Get Violin (Sound)",
    Callback = function()
        loadstring(game:HttpGet("https://you.whimper.xyz/sources/slowed/2"))()
    end
})
Tabs.Troll:AddButton({
    Title = "Get Sofa",
    Callback = function()
        loadstring(game:HttpGet("https://you.whimper.xyz/sources/slowed/3"))()
    end
})
Tabs.Troll:AddButton({
    Title = "Get Teleport Tool",
    Callback = function()
        local mouse = game.Players.LocalPlayer:GetMouse()
        local tool = Instance.new("Tool")
        tool.RequiresHandle = false
        tool.Name = "Teleport"
        tool.Activated:Connect(function()
            local pos = mouse.Hit + Vector3.new(0, 2.5, 0)
            pos = CFrame.new(pos.X, pos.Y, pos.Z)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
        end)
        tool.Parent = game.Players.LocalPlayer.Backpack
    end
})

local HumanSection = Tabs.Troll:AddSection("Human Settings")
Tabs.Troll:AddButton({
    Title = "Become Small",
    Callback = function()
        local args = { [1] = "CharacterSizeUp", [2] = 4 }
        game:GetService("ReplicatedStorage").RE:FindFirstChild("1Clothe1s"):FireServer(unpack(args))
    end
})
Tabs.Troll:AddButton({
    Title = "Return to Normal Size",
    Callback = function()
        local args = { [1] = "CharacterSizeUp", [2] = 1 }
        game:GetService("ReplicatedStorage").RE:FindFirstChild("1Clothe1s"):FireServer(unpack(args))
    end
})

local OrbitSection = Tabs.Troll:AddSection("Orbit Settings")
local selectedPlayer
local orbiting = false
local function getPlayers()
    local playerNames = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
    return playerNames
end
local playerDropdown = Tabs.Troll:LAddDropdown({
    Title = "Select Player",
    Default = "",
    Options = getPlayers(),
    Callback = function(value)
        selectedPlayer = Players:FindFirstChild(value)
    end
})
Tabs.Troll:AddToggle({
    Title = "Start Orbit",
    Default = false,
    Callback = function(value)
        orbiting = value
        if orbiting and selectedPlayer then
            while orbiting do
                local targetPosition = selectedPlayer.Character.HumanoidRootPart.Position
                local orbitPosition = targetPosition + Vector3.new(math.cos(tick() * 20) * 5, 0, math.sin(tick() * 20) * 5)
                local tweenInfo = TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
                local tween = game:GetService("TweenService"):Create(LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = CFrame.new(orbitPosition)})
                tween:Play()
                tween.Completed:Wait()
            end
        end
    end
})

-- Settings Tab
local AntiSection = Tabs.Settings:AddSection("Anti Settings")
local function disableLaggyFeatures()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") then
            v.Enabled = false
        end
    end
end
Tabs.Settings:AddToggle({
    Title = "Anti Sit",
    Default = true,
    Callback = function(value)
        if value then
            game:GetService("RunService").Stepped:Connect(function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                    if LocalPlayer.Character.Humanoid.Sit then
                        LocalPlayer.Character.Humanoid.Sit = false
                    end
                end
            end)
        end
    end
})
Tabs.Settings:AddToggle({
    Title = "Anti Void",
    Default = true,
    Callback = function(value)
        if value then
            game:GetService("RunService").Stepped:Connect(function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    if LocalPlayer.Character.HumanoidRootPart.Position.Y < -50 then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0, 50, 0)
                    end
                end
            end)
        end
    end
})
Tabs.Settings:AddToggle({
    Title = "Auto Rejoin",
    Default = true,
    Callback = function(value)
        if value then
            game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
                if child.Name == "ErrorPrompt" then
                    game:GetService("TeleportService"):Teleport(game.PlaceId, LocalPlayer)
                end
            end)
        end
    end
})
Tabs.Settings:AddToggle({
    Title = "Anti Lag",
    Default = true,
    Callback = function(value)
        if value then
            disableLaggyFeatures()
            workspace.DescendantAdded:Connect(function(descendant)
                if descendant:IsA("ParticleEmitter") or descendant:IsA("Trail") or descendant:IsA("Smoke") or descendant:IsA("Fire") then
                    descendant.Enabled = false
                end
            end)
        end
    end
})

local GeneralSection = Tabs.Settings:AddSection("General Settings")
Tabs.Settings:AddButton({
    Title = "Teleport to Spawn",
    Callback = function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0, 50, 0)
        end
    end
})
local function removeLag()
    for _, part in pairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") then
            if not part.Visible or part.Transparency >= 1 then
                part:Destroy()
            end
        end
    end
    for _, light in pairs(workspace:GetDescendants()) do
        if light:IsA("Light") then
            if not light.Parent or not light.Parent.Parent then
                light:Destroy()
            end
        end
    end
    for _, texture in pairs(workspace:GetDescendants()) do
        if texture:IsA("Texture") then
            if texture.Parent and not texture.Parent.Visible then
                texture:Destroy()
            end
        end
    end
    Fluent:Notify({
        Title = "Removing...",
        Content = "Textures, lights, and invisible objects have been removed.",
        Duration = 5
    })
end
Tabs.Settings:AddButton({
    Title = "Remove Lag",
    Callback = removeLag
})

-- Final Connections and Initialization
game:GetService("RunService").RenderStepped:Connect(updateESP)
updatePlayerList(playerDropdown)
Fluent:Init()
print("Skidware Initialized")

local function detectExploits()
    local exploitCount = 0
    for _, player in ipairs(Players:GetPlayers()) do
        if player:FindFirstChild("HumanoidRootPart") and player.HumanoidRootPart.Anchored then
            exploitCount = exploitCount + 1
        end
    end
    return exploitCount
end
local function updateExploitCount()
    local exploitCount = detectExploits()
    exploitCountLabel:Set({ Title = "Exploit Count", Content = tostring(exploitCount) })
end
Players.PlayerAdded:Connect(updateExploitCount)
Players.PlayerRemoving:Connect(updateExploitCount)
updateExploitCount()
